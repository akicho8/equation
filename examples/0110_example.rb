# -*- coding: utf-8 -*-
$LOAD_PATH.unshift File.expand_path('../../lib', __FILE__)
require 'equation'

# レベルの範囲が 1..99 で強さが 0..9999 の範囲を取るとき、直線の関係にある場合の、レベル 30 のときの強さは？ またその値からレベルを求めるには？

curve = Equation::LinearCurve._create(1..99, 0..9999)
v = curve.y_by_x(30)        # => 2958.887755102041
curve.x_by_y(v)             # => 30.0

# レベルの範囲が 1..99 で経験値が 0..9999 の範囲を取るとき、放物線の関係にある場合の、レベル 30 のときの経験値は？ またその値からレベルを求めるには？

curve = Equation::ParabolaCurve._create(1..99, 0..9999)
v = curve.y_by_x(30)        # => 875.5892336526447
curve.x_by_y(v)             # => 29.999999999999996

# レベルの範囲が 1..99 で攻撃力が 0..9999 の範囲を取るとき、左下 0.0, 右上1.0 を結ぶ斜めのベジェ曲線の中央の制御点を左上に 0.25 移動させた曲線の関係にある場合の、レベル30のときの攻撃力は？ またその値からレベルを求めるには？

curve = Equation::BezierCurve._create(1..99, 0..9999, :pull => 0.25)
v = curve.y_by_x(30)        # => 5390.609466908335
curve.x_by_y(v)             # => 30.00000000000001
